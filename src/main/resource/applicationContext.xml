<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	<!-- 以下为shiro需要的配置项 -->

	<!--以下为shiro需要的配置项-->
	<!--此处表示使用内置的表单登录控制验证-->
	<bean id="fromAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<!--定义出需要使用的参数，此参数与表单一一对应-->
		<property name="usernameParam" value="mid"/>
		<property name="passwordParam" value="password"/>
		<property name="loginUrl" value="/loginUrl.action"/>
 	</bean>

	<!-- 配置SecurityManager的管理 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 配置你需要使用的Realms -->
		<property name="realm" ref="memberRealm"/>
	</bean>

	<!-- 配置shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 表示现在要配置的是一个安全管理器 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 出现错误之后的跳转路径的配置 -->
		<property name="loginUrl" value="/loginUrl.action"/>
		<!-- 认证失败之后的跳转路径页面 -->
		<property name="unauthorizedUrl" value="/unauthUrl.action"/>
		<!-- 登录成功之后的跳转访问路径 -->
		<property name="successUrl" value="/successUrl.action"/>
		<!--配置shiro里面需要使用到的过滤器操作-->
		<property name="filters">
			<map>
				<entry key="authc" value-ref="fromAuthenticationFilter"/>
			</map>
		</property>
		<!-- shiro里面需要针对于所有的路径进行配置，所有的配置需要通过文本的形式设置 -->
		<property name="filterChainDefinitions">
			<value>
				/loginUrl.action=authc
				/*=anon
				/messages/**=authc
				/admin*=authc
				/pages/welcome.jsp=authc,perms[member:add],perms[dept:add]
			</value>
		</property>
	</bean>

	<!-- 配置Shiro在Spring中的生命周期的控制操作 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


	<!-- 定义自动注解扫描的操作 -->
	<context:annotation-config/>
	<context:component-scan base-package="com.zhy"/>
	<!-- 导入所有与数据库连接有关的信息项 -->
	<context:property-placeholder location="classpath:database.properties" />
	<!-- 进行数据库连接池的配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driver}" />	<!-- 驱动程序 -->
		<property name="jdbcUrl" value="${db.url}" /><!-- 连接地址 -->
		<property name="user" value="${db.user}" />	<!-- 用户名 -->
		<property name="password" value="${db.password}" />	<!-- 密码 -->
		<property name="maxPoolSize" value="${db.maxPoolSize}" />	<!-- 最大的可用连接数 -->
		<property name="minPoolSize" value="${db.minPoolSize}" />	<!-- 最小维持的连接数 -->
		<property name="initialPoolSize" value="${db.initialPoolSize}" />	<!-- 初始化连接数 -->
		<property name="maxIdleTime" value="${db.maxIdleTime}" />	<!-- 最大等待连接 -->
	</bean>
	<!-- 定义Spring与MyBatis整合的操作控制，此时数据库的连接对象取得由Spring负责 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置所有资源文件的保存路径的资源匹配符 -->
		<property name="mapperLocations" value="classpath:com/zhy/vo/mapping/*.xml"/>
		<property name="configLocation" value="classpath:mybatis.cfg.xml"/>
	</bean>
	<!-- 配置自动创建数据层实现类的开发包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 定义该包中的访问为自动配置实现 -->
		<property name="basePackage" value="com.zhy.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
	</bean>
	<!-- 定义数据库的声明式事务控制，直接与业务方法对应 -->
	<!-- 定义事务的处理切入点 -->
	<aop:config expose-proxy="true">
		<aop:pointcut expression="execution(* com.zhy..service..*.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
	</aop:config>
	<!-- 进入到了事务的配置声明 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义一切与服务层有关的控制方法名称，只要是使用了特定的名称那么就会自动处理事务 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			<tx:method name="change*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="login*" propagation="REQUIRED"/>
			<tx:method name="rm*" propagation="REQUIRED"/>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="check*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 定义数据库的事务控制，本事务控制直接针对于数据库连接操作进行 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
</beans>